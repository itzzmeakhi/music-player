{"version":3,"sources":["utils/constants.js","components/Player/Player.js","components/Song/Song.js","components/LibrarySong/LibrarySong.js","components/LibrarySection/LibrarySection.js","components/Library/Library.js","components/Nav/Nav.js","utils/data.js","App.js","reportWebVitals.js","index.js"],"names":["SKIP_BACK","SKIP_FORWARD","Player","currentSong","isPlaying","setIsPlaying","songs","setSongs","favorites","setFavorites","isInFavorites","favoriteSongs","songRef","useRef","songInFavorites","some","fav","favoriteId","id","useState","currentTime","duration","percentAnimation","songTimeInfo","setSongTimeInfo","getTime","time","Math","floor","slice","songTimeHandler","event","target","round","songSkipHandler","direction","songsList","length","currentSongIndex","findIndex","song","newSongIndex","nextSong","updatedSongs","map","active","trackAnim","transform","className","size","icon","faEllipsisV","style","color","onClick","updatedFavorites","filter","faHeart","background","min","max","value","onChange","current","type","faAngleLeft","pause","play","faPause","faPlay","faAngleRight","preload","onLoadedData","onLoadedMetadata","onTimeUpdate","onEnded","src","audio","ref","Song","cover","alt","name","artist","LibrarySong","setActiveSong","libraryStatus","setLibraryStatus","LibrarySection","defaultAccordionStatus","isFavorites","setIsInFavorites","accordionStatus","setAccordionStatus","faChevronUp","faChevronDown","Library","color1","color2","gradient","backgroundImage","faTimes","Nav","faMusic","musicData","uuidv4","App","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7480135.chunk.js","sourcesContent":["export const SKIP_BACK = 'SKIP_BACK';\nexport const SKIP_FORWARD = 'SKIP_FORWARD';\n\nexport const SECTION_LIBRARY = 'Library';\nexport const SECTION_SONGS = 'Songs';\nexport const SECTION_FAVORITES = 'Favorites';\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SKIP_BACK, SKIP_FORWARD } from './../../utils/constants';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleLeft, faAngleRight, faPlay, faPause, faHeart, faEllipsisV } from '@fortawesome/free-solid-svg-icons';\n\nimport './Player.scss';\n\nconst Player = ({ \n    currentSong, \n    isPlaying, \n    setIsPlaying, \n    songs, \n    setSongs, \n    favorites, \n    setFavorites,\n    isInFavorites,\n    favoriteSongs }) => {\n    const songRef = useRef(null);\n    const songInFavorites = favorites.some(fav => fav.favoriteId === currentSong.id);\n    const [songTimeInfo, setSongTimeInfo] = useState(\n        {\n            currentTime: 0,\n            duration: 0,\n            percentAnimation: 0\n        }\n    );\n\n    const getTime = (time) => {\n        return(\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n        );\n    };\n\n    const playSongHandler = () => {\n        if(isPlaying) {\n            songRef.current.pause();\n        } else {\n            songRef.current.play();\n        }\n        setIsPlaying(!isPlaying);\n    };\n\n    const songTimeHandler = (event) => {\n        const { currentTime, duration } = event.target;\n        const percentAnimation = Math.round((Math.round(currentTime) / Math.round(duration))*100);\n        setSongTimeInfo({\n            ...songTimeInfo,\n            currentTime,\n            duration,\n            percentAnimation\n        });\n    };\n\n    const songAutoPlayHandler = () => {\n        if(isPlaying) {\n            songRef.current.play();\n        }\n    };\n\n    const dragHandler = (event) => {\n        const { value } = event.target;\n        songRef.current.currentTime = value;\n        setSongTimeInfo({\n            ...songTimeInfo,\n            currentTime: value\n        });\n    };\n\n    const songSkipHandler = (direction) => {\n        let songsList = [...songs];\n        if(isInFavorites && favoriteSongs.length > 0) {\n            songsList = [...favoriteSongs];\n        }\n        const currentSongIndex = songsList.findIndex(song => song.id === currentSong.id);\n        let newSongIndex = currentSongIndex;\n        if(direction === SKIP_FORWARD) {\n            newSongIndex = (currentSongIndex + 1) % songsList.length;\n        } else if(direction === SKIP_BACK) {\n            newSongIndex = (currentSongIndex - 1) % songsList.length;\n            if(newSongIndex === -1) newSongIndex = songsList.length - 1;\n        }\n        const nextSong = songsList[newSongIndex];\n        const updatedSongs = songs.map(song => {return {...song, active: song.id === nextSong.id ? true: false}});\n        setSongs([\n            ...updatedSongs\n        ]);\n    };\n\n    const songEndedHandler = () => {\n        let songsList = [...songs];\n        if(isInFavorites && favoriteSongs.length > 0) {\n            songsList = [...favoriteSongs];\n        }\n        const currentSongIndex = songsList.findIndex(song => song.id === currentSong.id);\n        const newSongIndex = (currentSongIndex + 1) % songsList.length;\n        const nextSong = songsList[newSongIndex];\n        const updatedSongs = songs.map(song => {return {...song, active: song.id === nextSong.id ? true: false}});\n        setSongs([\n            ...updatedSongs\n        ]);\n    };\n\n    const addToFavorite = () => {\n        const favoriteId = currentSong.id;\n        if(!songInFavorites) {\n            setFavorites([\n                ...favorites,\n                { 'favoriteId': favoriteId }\n            ]);\n        } else {\n            const updatedFavorites = favorites.filter(fav => fav.favoriteId !== currentSong.id);\n            setFavorites([\n                ...updatedFavorites\n            ]);\n        }\n    };\n\n    const trackAnim = {\n        transform: `translateX(${songTimeInfo.percentAnimation}%)`\n    };\n\n    return ( \n        <div className=\"player-container\">\n\n            <div className=\"favorite-controls\">\n                <FontAwesomeIcon\n                    size=\"1x\"\n                    icon={faEllipsisV} />\n                <FontAwesomeIcon \n                    size=\"1x\"\n                    style={{color: `${songInFavorites ? '#ee5253' : '#000'}`}}\n                    onClick={addToFavorite}\n                    icon={faHeart} />\n            </div>\n\n            <div className=\"time-controls\">\n                <p>{getTime(songTimeInfo.currentTime)}</p>\n                <div className=\"track\" style={{\n                    background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`\n                }}>\n                    <input \n                        min={0}\n                        max={songTimeInfo.duration || 0}\n                        value={songTimeInfo.currentTime}\n                        onChange={dragHandler}\n                        type=\"range\" />\n                    <div className=\"animate-track\" style={trackAnim}></div>\n                </div>\n                <p>{songTimeInfo.duration ? getTime(songTimeInfo.duration) : '0.00'}</p>\n            </div>\n\n            <div className = \"player-controls\">\n                <FontAwesomeIcon \n                    size=\"2x\"\n                    onClick={() => songSkipHandler(SKIP_BACK)} \n                    icon={faAngleLeft} />\n                <FontAwesomeIcon \n                    size=\"2x\"\n                    onClick={playSongHandler} \n                    icon={isPlaying ? faPause : faPlay} />\n                <FontAwesomeIcon \n                    size=\"2x\"\n                    onClick={() => songSkipHandler(SKIP_FORWARD)} \n                    icon={faAngleRight} />\n            </div>\n\n            <audio \n                preload=\"auto\"\n                onLoadedData={songAutoPlayHandler}\n                onLoadedMetadata={songTimeHandler}\n                onTimeUpdate={songTimeHandler} \n                onEnded={songEndedHandler}\n                src={currentSong.audio} \n                ref={songRef}>\n            </audio>\n\n        </div>\n        \n    )\n}\n\nPlayer.propTypes = {\n    currentSong: PropTypes.object,\n    isPlaying: PropTypes.bool,\n    setIsPlaying: PropTypes.func,\n    songs: PropTypes.array,\n    favoriteSongs: PropTypes.array,\n    setSongs: PropTypes.func,\n    favorites: PropTypes.array,\n    isInFavorites: PropTypes.bool,\n    setFavorites: PropTypes.func\n};\n\nexport default Player;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Song.scss';\n\nconst Song = ({ currentSong }) => {\n    return (\n        <div className=\"song-container\">\n            <img src={currentSong.cover} alt={currentSong.name} />\n            <h2>{currentSong.name}</h2>\n            <h3>{currentSong.artist}</h3>\n        </div>\n    )\n}\n\nSong.propTypes = {\n    currentSong: PropTypes.object\n};\n\nexport default Song;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './LibrarySong.scss';\n\nconst LibrarySong = ({ song, setActiveSong, libraryStatus, setLibraryStatus }) => {\n    const selectSongHandler = () => {\n        setActiveSong(song.id);\n        setLibraryStatus(!libraryStatus);\n    }\n\n    return (\n        <div className={`library-song ${song.active ? 'selected' : ''}`} onClick={selectSongHandler}>\n            <img src={song.cover} alt={song.name} />\n            <div className=\"song-description\">\n                <h3>{song.name}</h3>\n                <h4>{song.artist}</h4>\n            </div>\n        </div>\n    )\n}\n\nLibrarySong.propTypes = {\n    song: PropTypes.object,\n    setActiveSong: PropTypes.func,\n    libraryStatus: PropTypes.bool,\n    setLibraryStatus: PropTypes.func\n};\n\nexport default LibrarySong;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport LibrarySong from './../LibrarySong/LibrarySong';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons';\n\nimport './LibrarySection.scss';\n\nconst LibrarySection = ({ \n    name, \n    songs, \n    favoriteSongs,\n    libraryStatus, \n    setLibraryStatus, \n    setSongs, \n    defaultAccordionStatus,\n    isFavorites,\n    setIsInFavorites }) => {\n    const [accordionStatus, setAccordionStatus] = useState(defaultAccordionStatus);\n    const setActiveSong = (id) => {\n        const updatedSongs = songs.map(song => {\n            return {...song, active: song.id === id ? true : false}\n        });\n        setSongs([...updatedSongs]);\n    };\n    const songsList = isFavorites ? [...favoriteSongs] : [...songs];\n    return (\n        <div className=\"library-section\" onClick={() => setIsInFavorites(isFavorites)}>\n            <div \n                className=\"library-accordions\" \n                onClick={() =>setAccordionStatus(!accordionStatus)}>\n                <h2>{name}</h2>\n                <FontAwesomeIcon\n                    icon={accordionStatus ? faChevronUp : faChevronDown} />\n            </div>\n\n            {accordionStatus && songsList.map(song => (\n                <LibrarySong \n                    key={song.id} \n                    song={song}\n                    setActiveSong={setActiveSong}\n                    libraryStatus={libraryStatus}\n                    setLibraryStatus={setLibraryStatus} />\n            ))}\n        </div>\n    );\n}\n\nLibrarySection.propTypes = {\n    name: PropTypes.string,\n    songs: PropTypes.array,\n    favoriteSongs: PropTypes.array,\n    libraryStatus: PropTypes.bool,\n    setLibraryStatus: PropTypes.func,\n    setSongs: PropTypes.func,\n    defaultAccordionStatus: PropTypes.bool,\n    isFavorites: PropTypes.bool,\n    setIsInFavorites: PropTypes.func\n};\n\nexport default LibrarySection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport LibrarySection from './../LibrarySection/LibrarySection';\nimport { SECTION_SONGS, SECTION_FAVORITES, SECTION_LIBRARY } from './../../utils/constants';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nimport './Library.scss';\n\nconst Library = ({ \n    songs, \n    setSongs, \n    libraryStatus, \n    setLibraryStatus, \n    setIsInFavorites,\n    favoriteSongs }) => {\n    let color1 = '#fff';\n    let color2 = '#fff';\n    songs.map(song => {\n        if(song.active) {\n            color1 = song.color[0];\n            color2 = song.color[1];\n        }\n        return song;\n    });\n    const gradient = {\n        backgroundImage: `linear-gradient(to right, ${color1}, ${color2})`\n    };\n    return (\n        <div className={`library ${libraryStatus ? 'active' : ''}`} style={gradient}>\n\n            <div className=\"library-header\">\n                <h2>{SECTION_LIBRARY}</h2>\n                <FontAwesomeIcon\n                    onClick={() => setLibraryStatus(!setLibraryStatus)}\n                    icon={faTimes}\n                    size=\"1x\" />\n            </div>\n\n            <LibrarySection\n                name={SECTION_SONGS}\n                songs={songs}\n                favoriteSongs={favoriteSongs}\n                libraryStatus={libraryStatus}\n                setLibraryStatus={setLibraryStatus}\n                defaultAccordionStatus={true}\n                setSongs={setSongs}\n                isFavorites={false}\n                setIsInFavorites={setIsInFavorites} />\n\n            <LibrarySection\n                name={SECTION_FAVORITES}\n                songs={songs}\n                favoriteSongs={favoriteSongs}\n                libraryStatus={libraryStatus}\n                setLibraryStatus={setLibraryStatus}\n                defaultAccordionStatus={false}\n                setSongs={setSongs}\n                isFavorites={true}\n                setIsInFavorites={setIsInFavorites} />\n\n        </div>\n    )\n}\n\nLibrary.propTypes = {\n    songs: PropTypes.array,\n    setSongs: PropTypes.func,\n    libraryStatus: PropTypes.bool,\n    setLibraryStatus: PropTypes.func,\n    setIsInFavorites: PropTypes.func,\n    favoriteSongs: PropTypes.array\n};\n\nexport default Library;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMusic } from '@fortawesome/free-solid-svg-icons';\n\nimport './Nav.scss';\n\nconst Nav = ({ libraryStatus, setLibraryStatus }) => {\n    return (\n        <nav>\n            <h1>iMusic</h1>\n            <button onClick={() => setLibraryStatus(!libraryStatus)}>\n                Library &nbsp;\n                <FontAwesomeIcon icon={faMusic} />\n            </button>\n        </nav>\n    );\n}\n\nNav.propTypes = {\n    libraryStatus: PropTypes.bool,\n    setLibraryStatus: PropTypes.func\n};\n\nexport default Nav;","import { v4 as uuidv4 } from \"uuid\";\n\nconst musicData = () => {\n  return [\n    {\n      name: \"Beaver Creek\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n      artist: \"Aso, Middle School, Aviino\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10075\",\n      color: [\"#205950\", \"#2ab3bf\"],\n      id: uuidv4()\n    },\n    {\n      name: \"Daylight\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\n      artist: \"Aiguille\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9272\",\n      color: [\"#EF8EA9\", \"#ab417f\"],\n      id: uuidv4()\n    },\n    {\n      name: \"Keep Going\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\n      artist: \"Swørn\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9222\",\n      color: [\"#CD607D\", \"#c94043\"],\n      id: uuidv4()\n    },\n    {\n      name: \"Nightfall\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\n      artist: \"Aiguille\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9148\",\n      color: [\"#EF8EA9\", \"#ab417f\"],\n      id: uuidv4()\n    },\n    {\n      name: \"Reflection\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\n      artist: \"Swørn\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9228\",\n      color: [\"#CD607D\", \"#c94043\"],\n      id: uuidv4()\n    },\n    {\n      name: \"Under the City Stars\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n      artist: \"Aso, Middle School, Aviino\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\n      color: [\"#205950\", \"#2ab3bf\"],\n      id: uuidv4()\n    }\n  ];\n}\n\nexport default musicData;","import React, { useState } from 'react';\n\nimport Player from './components/Player/Player';\nimport Song from './components/Song/Song';\nimport Library from './components/Library/Library';\nimport Nav from './components/Nav/Nav';\n\nimport musicData from './utils/data';\n\nimport './App.scss';\n\nconst App = () => {\n    const [songs, setSongs] = useState(musicData().map((song, index) => {return {...song, active: index === 0 ? true : false}}));\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [libraryStatus, setLibraryStatus] = useState(false);\n    const [favorites, setFavorites] = useState([]);\n    const [isInFavorites, setIsInFavorites] = useState(false);\n    const currentSong = songs[songs.findIndex(song => song.active)];\n    const favoriteSongs = favorites.length > 0 ? songs.filter(song => favorites.some(fav => fav.favoriteId === song.id)) : [];\n    return (\n        <div className={`${libraryStatus ? 'library-active' : ''}`}>\n            <Nav \n                libraryStatus={libraryStatus}\n                setLibraryStatus={setLibraryStatus} />\n            <Song \n                currentSong={currentSong} />\n            <Player \n                isPlaying={isPlaying}\n                setIsPlaying={setIsPlaying}\n                currentSong={currentSong} \n                songs={songs}\n                favoriteSongs={favoriteSongs}\n                setSongs={setSongs}\n                favorites={favorites}\n                isInFavorites={isInFavorites}\n                setFavorites={setFavorites} />\n            <Library \n                songs={songs} \n                setSongs={setSongs}\n                libraryStatus={libraryStatus}\n                favoriteSongs={favoriteSongs}\n                setIsInFavorites={setIsInFavorites}\n                setLibraryStatus={setLibraryStatus} />\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}